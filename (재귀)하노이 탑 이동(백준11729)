//백준 11729번
하노이 탑 이동 순서 문제
//////////////////////////////////////////////////
문제
세 개의 장대가 있고 첫 번째 장대에는 반경이 서로 다른 n개의 원판이 쌓여 있다. 각 원판은 반경이 큰 순서대로 쌓여있다. 
이제 수도승들이 다음 규칙에 따라 첫 번째 장대에서 세 번째 장대로 옮기려 한다.

한 번에 한 개의 원판만을 다른 탑으로 옮길 수 있다.
쌓아 놓은 원판은 항상 위의 것이 아래의 것보다 작아야 한다.
첫째 줄에 옮긴 횟수 K를 출력한다.

두 번째 줄부터 수행 과정을 출력한다. 
두 번째 줄부터 K개의 줄에 걸쳐 두 정수 A B를 빈칸을 사이에 두고 출력하는데, 
이는 A번째 탑의 가장 위에 있는 원판을 B번째 탑의 가장 위로 옮긴다는 뜻이다.
/////////////////////////////////////////////////////

처음봤을 때 스택으로 풀 수 있을 것 같았지만
재귀 카테고리라 재귀로 풀기로 함

1번 장대에 있는 N개의 원판을 3번 장대로 옮기기

N이 1일때부터 4일때까지 수작업으로 해본 결과

원판이 N개 일 때의 이동 횟수 = COUNT(N)
N=1,2,3,4 일 때 k= COUNT(N) = 1, 3, 5, 7, 15 회
IF(N=1) COUNT(N)=1
COUNT(N) = COUNT(N-1)+1

N=1 일 때, k=1
1 3 (N = 1 을 3으로)

N=2 일 때, k=3
1 2
1 3 (N = 2를 3으로)
2 3 (N-1 = 1을 3으로)

N=3 일 때, k=7
1 3
1 2
3 2
1 3 (N = 3을 3으로)
2 1 
2 3 (N-1 = 2를 3으로)
1 3 (N-2 = 1을 3으로)

N=4 일 때, k=15
1 2
1 3
2 3
1 2
3 1
3 2
1 2
1 3 (N = 4를 3으로)
2 3
2 1
3 1
2 3 (N-1 = 3을 3으로)
1 2
1 3 (N-2 = 2를 3으로)
2 3 (N-3 = 1을 3으로)

정리하면
FUNC(N) 은
1. N개의 원판을 3으로 옮기려면
2. 1 OR 2 장대에 있는 N-1까지의 원판들을 2 OR 1로 옮기고
3. 혼자 남은 N 원판을 3으로 옮긴 뒤
4. 다시 1부터 반복해서 다 옮기기
이라는 구조가 나온다

그런데 2번의 경우에서, N-1개를 다른 어딘가로 옮긴다는 것 또한 어떻게 보면
FUNC(N)의 형태라고 볼 수 있다.
이것을 반복하다보면 FUNC(N)은 결국 FUNC(1)의 연속이라는 것을 볼 수 있게 된다.

각 FUNC(N) 안에서 이전 FUNC들이 반복된다는 것.
이걸 좀 더 자세히 보기 위해 FUNC(N)을 FUNC(N, A, B)로 바꾼다
A에 있는 N개의 원반을 B로 옮긴다는 뜻이다.
이런 관점에서 위의 구조를 다시 보면

N=1 일 때, k=1
1 3 FUNC(1, 1, 3) 

N=2 일 때, k=3
1 2 FUNC(1, 1, 2)
1 3 FUNC(1, 1, 3) (N = 2 를 3으로)
2 3 FUNC(1. 2. 3) 

N=3 일 때, k=7
1 3 FUNC(1, 1, 3) ] 
1 2 FUNC(1, 1, 2) ] FUNC(N-1) = FUNC(2, 1, 2)
3 2 FUNC(1, 3, 2) ]
1 3 FUNC(1, 1, 3) (N = 3을 3으로)
2 1 FUNC(1, 2, 1) ]
2 3 FUNC(1, 2, 3) ] FUNC(N-1) = FUNC(2, 2, 3)  
1 3 FUNC(1, 1, 3) ]

N=4 일 때, k=15
1 2 FUNC(1, 1, 2) ]               ]
1 3 FUNC(1, 1, 3) ] FUNC(2, 1, 3) ]
2 3 FUNC(1, 2, 3) ]               ]
1 2 FUNC(1, 1, 2) (N-1=3을 2로)   ] FUNC(3, 1, 2)
3 1 FUNC(1, 3, 1) ]               ]
3 2 FUNC(1, 3, 2) ] FUNC(2, 1, 2) ]
1 2 FUNC(1, 1, 2) ]               ]
1 3 FUNC(1, 1, 3) (N = 4를 3으로)
2 3 FUNC(1, 2, 3) ]               ]
2 1 FUNC(1, 2, 1) ] FUNC(2, 2, 1) ]
3 1 FUNC(1, 3, 1) ]               ]
2 3 FUNC(1, 2, 3) (N-1=3을 3으로) ] FUNC(3, 2, 3)
1 2 FUNC(1, 1, 2) ]               ]
1 3 FUNC(1, 1, 3) ] FUNC(2, 1, 3) ]
2 3 FUNC(1, 2, 3) ]               ]

이렇게 된다.

A에 있는 N개의 원반을 B로 옮기기 위해서
1. N-1개의 원반을 6-A-B번으로 보낸 뒤
2. N을 B로 보내고
3. N-1개의 원반을 B로 옮긴다
라는 재귀 구조가 성립할 것 같다.
식을 세워보면

FUNC(N, A=1, B=3) = 
FUNC(N-1, A=1, 6-A-B=2) + FUNC(1, A, B) + FUNC(N-1, 6-A-B=2, B=3)

이렇게 나온다.
이 재귀함수가 무한 루프에 빠지지 않으려면 N=1일 경우를 설정해야 하는데

FUNC(1 , A, B) = A B

이렇게 해주면 될 것 같다.
이제 코드를 짜서 

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main
{
	public static void main(String[] args)throws Exception {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    
	    int n = Integer.parseInt(br.readLine());
	    
	    System.out.println(k(n));
	    Func(n, 1, 3);
	}
	
	public static void Func(int N, int A, int B){
	    if(N==1) {
	        System.out.println(A+" "+B);
	        return;
	    }
	    Func(N-1, A, 6-A-B); 
	    Func(1, A, B); 
	    Func(N-1, 6-A-B, B);
	}
	
	public static int k(int a){
	    if(a==1) {
	        return 1;
	    }
	    return k(a-1) * 2 + 1 ;
	}
}


제출을 하면 시간초과가 뜬다...
뭐가 잘못된걸까?

k 관련된 부분을 바꿔주고 출력을 BufferedWriter로 고쳐주고 조금 고쳐줬더니 통과했다
