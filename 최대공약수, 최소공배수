// 프로그래머스 최대공약수와 최소공배수 문제

// 반복문으로 최대공약수, 최소공배수 찾기

import java.util.*;
class Solution {
    public int[] solution(int n, int m) {
        
        int min = Math.min(n,m);       // n과 m 중 작은수
        int max = Math.max(n,m);       // 큰 수
        
        Stack<Integer>stk = new Stack<>();
        
        int i = 2; 
        
        while(i<=min){ // 반복문 시작
            if(min%i==0 && max%i==0){ // 만약 n과 m 둘 다 i로 나누어지면 
                min /= i;             // i로 나누고
                max /= i;
                stk.push(i);          // i를 스택에 다 때려넣음
            }
            else{                    // 안 나누어지는데
                if(i==min){break;}   // 만약 i가 작은 수까지 되면 멈추고
                else i++;            // 아니면 i를 늘림
            } 
        }
        
        int gcd = 1;
        
        while(!stk.isEmpty()){      // 스택에 있는 값들을 곱하면 최대공약수
            gcd *=stk.pop();
        }
        
        int lcm = gcd*min*max;      // 거기에 min과 max를 곱하면 최소공배수
        
        int[] answer = {gcd, lcm};
        
        return answer;
    }
}



/// 정말 간결한 공식

class Solution {
    public int[] solution(int n, int m) {
        int[] answer = new int[2];
        for (int i = 1; i < n + m; i++) {
            if (n % i == 0 && m % i == 0) {    
                answer[0] = i;                      /// 최대공약수는 n과 m의 공약수 중 제일 큰 수만 찾으면 되는 것이고
                answer[1] = n * m / answer[0];      /// 최소공배수는 두 수를 곱한 뒤 최대공약수로 나누면  
            }
        }
        return answer;
    }
}


// 유클리드 호제법

class Solution {
    public int[] solution(int n, int m) {
        
        int a = Math.max(n,m);
        int b = Math.min(n,m);
        int c = a%b;
        
        while(c>0){
            a = b;
            b = c;
            c = a%b;
        }
        int gcd = b;
        
        int[] answer = {b, n*m/b};
        return answer;
    }
}
