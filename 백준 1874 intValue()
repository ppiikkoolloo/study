스택 수열

문제
스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다. 
스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 (LIFO, Last in First out) 특성을 가지고 있다.

1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 
이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 
있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.

//////////////

계속 틀렸다...
분명 알고리즘은 맞게 짠 것 같은데????
get과 peek 비교 부분에 .intValue()를 붙이니 해결됐다.
알고리즘은 문제가 없었으나 다른 부분에 문제가 있었다.

/////////////////// 문제 해결에 도움이 된 답변 /////////////////
djm03178   4년 전    1좋아요
stack과 vector 모두 Integer 객체를 저장하는데, == 연산자로 두 Integer 객체를 비교하면 두 객체의 값이 같은지를 보는 것이 아니라
두 객체의 주소가 같은지를 비교합니다. 즉, 완전히 같은 객체일 때만 true가 됩니다.
이게 웬만한 입력에서는 잘 돌아가는 이유는, 자바의 경우 -128부터 127까지의 Integer 객체는 미리 만들어두고, 
이 범위 내의 값을 가질 경우 해당 객체를 사용하고, 그 외의 경우에만 새로운 객체를 만듭니다. 
그래서 손으로 직접 넣어볼 만한 케이스들에서는 이것이 항상 잘 작동되는 것처럼 보입니다. 
하지만 128 이상의 수가 들어갈 경우 == 연산이 원하는 대로 동작하지 않게 됩니다.
Integer와 int의 값을 비교할 때는 자바가 자동으로 언박싱을 해주기는 하지만, 
기본적으로 Integer 객체에 담긴 값을 비교할 때는 반드시 intValue() 를 쓰는 습관을 들이는 것이 좋습니다. 
그래야 이와 같은 실수를 방지할 수 있습니다.
///////////////////

import java.io.BufferedReader;

import java.io.InputStreamReader;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int n = Integer.parseInt(br.readLine());
        
        ArrayList<Integer> list = new ArrayList <> ();
        Stack<Integer> stk = new Stack<>();
        
        for(int i=1; i<=n; i++){
            list.add(Integer.parseInt(br.readLine()));
        }
        
        StringBuffer sb = new StringBuffer();
        
        int count = 0;
        
        while(count<=n){
            
            if(stk.isEmpty()){
                count++;
                stk.push(count);
                sb.append("+").append("\n");
            }
            if(stk.peek().intValue() == list.get(0).intValue()){
                stk.pop();
                list.remove(0);
                sb.append("-").append("\n");
            }
            else{
                count++;
                stk.push(count);
                sb.append("+").append("\n");
            }
            
            if(count==n && list.isEmpty()){
                break;
                
            }
            else if(count == n && list.size()>0 && list.get(0).intValue()!=stk.peek().intValue()){
                System.out.println("NO");
                return;
            }
        }
        
        System.out.println(sb);
    }
}



///////////////////////////
처음엔 for문으로 풀다가 계속 틀려서 알고리즘이 틀렸나 해서 while로 갈아탔는데
여기도 intValue() 붙이니까 해결됐다
////////////////////////////

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int n = Integer.parseInt(br.readLine());
        
        ArrayList<Integer> list = new ArrayList <> ();
        Stack<Integer> stk = new Stack<>();
        
        for(int i=1; i<=n; i++){
            list.add(Integer.parseInt(br.readLine()));
        }
        
        StringBuffer sb = new StringBuffer();
        
        loop:
        for(int i=1; i<=n; i++){
            stk.push(i);
            sb.append("+").append("\n");
            while(!stk.isEmpty() && stk.peek().intValue() == list.get(0).intValue()) {
                list.remove(0);
                stk.pop();
                sb.append("-").append("\n");
                if(list.isEmpty() && i==n) break loop;
            }
            if(i==n && list.size() == stk.size() && list.get(0).intValue()!=stk.peek().intValue()){
                System.out.println("NO");
                return;
            } 
        }
        System.out.println(sb.toString() + "\n");
    }
}



